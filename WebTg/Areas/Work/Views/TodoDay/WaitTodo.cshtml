
@using System;
@using System.Data;
@using WeiCode.Utility;
@using WeiCode.DataBase;
@using WeiCode.Services;
@using WeiCode.ModelDbs;
@using WeiCode.Domain;
@using Services.Project;
@using WeiCode.Models;
@using System.Text;
@using Newtonsoft.Json;;


@{
    Layout = ModelBasic.PageModel.GetLayout();
}

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>待办事项管理</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

            .header h1 {
                font-size: 2.5rem;
                margin-bottom: 10px;
                font-weight: 300;
            }

            .header p {
                opacity: 0.9;
                font-size: 1.1rem;
            }

        .main-content {
            padding: 30px;
        }

        /* 浮动添加按钮 */
        .floating-add-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            transition: all 0.3s ease;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .floating-add-btn:hover {
                transform: translateY(-3px) scale(1.1);
                box-shadow: 0 12px 35px rgba(102, 126, 234, 0.5);
            }

            .floating-add-btn:active {
                transform: translateY(-1px) scale(1.05);
            }

        /* 弹出面板 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            backdrop-filter: blur(5px);
        }

            .modal-overlay.show {
                display: flex;
                animation: fadeIn 0.3s ease;
            }

        .add-task-modal {
            background: white;
            border-radius: 20px;
            padding: 30px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            transform: scale(0.8);
            transition: all 0.3s ease;
        }

        .modal-overlay.show .add-task-modal {
            transform: scale(1);
            animation: slideUp 0.3s ease;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            color: #999;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.3s ease;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .close-btn:hover {
                background: #f5f5f5;
                color: #333;
            }

        .add-task-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

            .form-group label {
                font-size: 14px;
                color: #666;
                font-weight: 500;
            }

        .form-input {
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            font-family: inherit;
        }

            .form-input:focus {
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .form-textarea {
            min-height: 80px;
            resize: vertical;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            margin-top: 10px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            flex: 1;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            }

        .btn-secondary {
            background: #f8f9fa;
            color: #666;
            border: 2px solid #e1e5e9;
        }

            .btn-secondary:hover {
                background: #e9ecef;
                border-color: #dee2e6;
            }

        /* 动画效果 */
        keyframes fadeIn {
            from

        {
            opacity: 0;
        }

        to {
            opacity: 1;
        }

        }

        keyframes slideUp {
            from

        {
            opacity: 0;
            transform: translateY(30px) scale(0.8);
        }

        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }

        }

        /* 分类标签 */
        .category-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .category-tab {
            padding: 8px 16px;
            background: #f8f9fa;
            border: 2px solid #e1e5e9;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
        }

            .category-tab.active {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-color: transparent;
            }

            .category-tab:hover {
                transform: translateY(-1px);
            }

        /* 任务列表 */
        .tasks-section {
            margin-top: 30px;
            height: 700px;
            overflow: auto
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .task-count {
            background: #667eea;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 14px;
        }

        .task-list {
            list-style: none;
        }

        .task-item {
            background: #f8f9fa;
            margin-bottom: 10px;
            border-radius: 15px;
            padding: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .task-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

            .task-item.completed {
                opacity: 0.6;
                background: #e8f5e8;
            }

                .task-item.completed .task-title {
                    text-decoration: line-through;
                    color: #666;
                }

        .task-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #ddd;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            flex-shrink: 0;
        }

            .task-checkbox.checked {
                background: #4CAF50;
                border-color: #4CAF50;
                color: white;
            }

                .task-checkbox.checked::after {
                    content: '✓';
                    font-size: 12px;
                    font-weight: bold;
                }

        .task-content {
            flex: 1;
            min-width: 0;
        }

        .task-title {
            font-size: 16px;
            font-weight: 500;
            color: #333;
            margin-bottom: 5px;
            cursor: pointer;
            word-wrap: break-word;
        }

        .task-meta {
            display: flex;
            gap: 15px;
            font-size: 12px;
            color: #666;
            flex-wrap: wrap;
        }

        .task-category {
            background: #667eea;
            color: white;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 11px;
        }

        .task-date {
            color: #e74c3c;
            font-weight: 500;
        }

            .task-date.start-date {
                color: #27ae60;
            }

        .task-description {
            color: #666;
            font-style: italic;
            margin-top: 5px;
        }

        .task-actions {
            display: flex;
            gap: 10px;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .task-item:hover .task-actions {
            opacity: 1;
        }

        .action-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .edit-btn {
            background: #3498db;
            color: white;
        }

            .edit-btn:hover {
                background: #2980b9;
            }

        .delete-btn {
            background: #e74c3c;
            color: white;
        }

            .delete-btn:hover {
                background: #c0392b;
            }

        /* 编辑模式 */
        .task-item.editing .task-content {
            display: none;
        }

        .task-edit-form {
            display: none;
            flex: 1;
            gap: 10px;
        }

        .task-item.editing .task-edit-form {
            display: flex;
            flex-direction: column;
        }

        .edit-input {
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            outline: none;
        }

            .edit-input:focus {
                border-color: #667eea;
            }

        .edit-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .save-btn {
            background: #27ae60;
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
        }

        .cancel-btn {
            background: #95a5a6;
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
        }

        /* 空状态 */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

            .empty-state i {
                font-size: 4rem;
                margin-bottom: 20px;
                opacity: 0.3;
            }

            .empty-state h3 {
                margin-bottom: 10px;
                color: #999;
            }

        /* 统计信息 */
        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .stat-item {
            background: #f8f9fa;
            padding: 15px 20px;
            border-radius: 10px;
            text-align: center;
            flex: 1;
            min-width: 120px;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 14px;
            color: #666;
        }

        /* 响应式设计 */
        media (max-width: 768px) {
            .container

        {
            margin: 10px;
            border-radius: 15px;
        }

        .header {
            padding: 20px;
        }

            .header h1 {
                font-size: 2rem;
            }

        .main-content {
            padding: 20px;
        }

        .floating-add-btn {
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            font-size: 20px;
        }

        .add-task-modal {
            width: 95%;
            padding: 20px;
            margin: 20px;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .form-actions {
            flex-direction: column;
        }

        .task-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .task-actions {
            opacity: 1;
            width: 100%;
            justify-content: flex-end;
        }

        .modal-header {
            margin-bottom: 20px;
            padding-bottom: 10px;
        }

        .modal-title {
            font-size: 1.3rem;
        }

        }

        /* 动画效果 */
        keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .task-item {
            animation: slideIn 0.3s ease;
        }

        /* 删除动画 */
        keyframes slideOut {
            to

        {
            opacity: 0;
            transform: translateX(-100%);
        }

        }

        .task-item.deleting {
            animation: slideOut 0.3s ease forwards;
        }

        /* 撤销提示 */
        .undo-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            display: none;
            z-index: 1000;
        }

        .undo-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            margin-left: 10px;
            cursor: pointer;
        }

        /* 通知样式 */
        .notification {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 14px;
            line-height: 1.4;
        }

        .notification-success {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
        }

        .notification-error {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .notification-info {
            background: linear-gradient(135deg, #3498db, #2980b9);
        }

        .notification-warning {
            background: linear-gradient(135deg, #f39c12, #e67e22);
        }

        /* 移动端通知适配 */
        media (max-width: 768px) {
            .notification

        {
            right: 10px;
            left: 10px;
            max-width: none;
            transform: translateY(-100%);
        }

        .notification.show {
            transform: translateY(0);
        }

        }



        .radio-container {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 500px;
        }

        .radio-group {
            display: flex;
            gap: 10px;
        }

        .radio-option {
            flex: 1;
        }

        .radio-input {
            display: none;
        }

        .radio-label {
            display: block;
            padding: 15px 10px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
            color: #495057;
        }

            .radio-label:hover {
                background: #e9ecef;
            }

        .radio-input:checked + .radio-label {
            background: #4263eb;
            color: white;
            border-color: #4263eb;
        }
    </style>
</head>
<body>

    @{

        var alltodo = DoMySql.FindList<ModelDb.p_work_todo>($"tg_sn = '{ViewBag.tg_sn}' and tenant_id='{ViewBag.tenant_id}'order by status");
    }
    <div class="container">
        <input type="hidden" name="tg_sn" id="tg_sn" value="@ViewBag.tg_sn" />
        <input type="hidden" name="tenant_id" id="tenant_id" value="@ViewBag.tenant_id" />
        <div class="main-content">
            <!-- 统计信息 -->
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number" id="totalTasks">@alltodo.Count()</div>
                    <div class="stat-label">总任务</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="completedTasks">@alltodo.Where(a => a.status == ModelDb.p_work_todo.status_enum.已完成.ToSByte()).Count()</div>
                    <div class="stat-label">已完成</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="pendingTasks">@alltodo.Where(a => a.status == ModelDb.p_work_todo.status_enum.未完成.ToSByte()).Count()</div>
                    <div class="stat-label">待完成</div>
                </div>
            </div>


            <!-- 分类标签 -->
            <div class="category-tabs">
                <div class="category-tab active" data-category="all">全部</div>
                <div class="category-tab" data-category="工作">工作</div>
                <div class="category-tab" data-category="个人">个人</div>
                <div class="category-tab" data-category="学习">学习</div>
                <div class="category-tab" data-category="购物">购物</div>
                <div class="category-tab" data-category="其他">其他</div>
            </div>

            <!-- 任务列表 -->
            <div class="tasks-section">
                <h2 class="section-title">
                    任务列表
                    <span class="task-count" id="currentTaskCount">0</span>
                </h2>
                <ul class="task-list" id="taskList">
                    <!-- 任务项将通过JavaScript动态添加 -->

                </ul>
                <div class="empty-state" id="emptyState" style="display: none;">
                    <div style="font-size: 4rem; margin-bottom: 20px;">📝</div>
                    <h3>暂无任务</h3>
                    <p>添加您的第一个任务开始管理吧！</p>
                </div>
            </div>
        </div>
    </div>

    <!-- 浮动添加按钮 -->
    <button class="floating-add-btn" id="floatingAddBtn" title="添加新任务">
        +
    </button>

    <!-- 添加任务弹出面板 -->
    <div class="modal-overlay" id="addTaskModal">
        <div class="add-task-modal">
            <div class="modal-header">
                <h3 class="modal-title">添加新待办</h3>
                <button class="close-btn" id="closeModalBtn">&times;</button>
            </div>
            <form class="add-task-form" id="addTaskForm">
                <div class="form-group">
                    <label for="taskDescription">任务描述</label>
                    <textarea class="form-input form-textarea" name="content" id="taskDescription" placeholder="输入任务描述或详细步骤..."></textarea>
                </div>
                <label for="taskStartTime">优先级</label>
                <div class="form-row">
                    <div class="radio-group">
                        <label class="radio-option">
                            <input type="radio" name="level" class="radio-input" value="low" checked>
                            <span class="radio-label">低</span>
                        </label>

                        <label class="radio-option">
                            <input type="radio" name="level" class="radio-input" value="medium">
                            <span class="radio-label">中</span>
                        </label>
                        <label class="radio-option">
                            <input type="radio" name="level" class="radio-input" value="high">
                            <span class="radio-label">高</span>
                        </label>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="taskStartTime">开始时间</label>
                        <input type="datetime-local" class="form-input" name="s_date_time" id="taskStartTime">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="taskDueTime">截止时间</label>
                        <input type="datetime-local" class="form-input" name="e_date_time" id="taskDueTime">
                    </div>
                    <div class="form-group">
                        <!-- 占位，保持布局平衡 -->
                    </div>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="cancelAddBtn">取消</button>
                    <button type="button" class="btn btn-primary" id="save">添加任务</button>
                </div>
            </form>
        </div>
    </div>

    <!-- 撤销通知 -->
    <div class="undo-notification" id="undoNotification">
        任务已删除
        <button class="undo-btn" id="undoBtn">撤销</button>
    </div>

    <script>

        class TodoApp {
            constructor() {
                this.tasks = this.loadTasks();
                this.currentCategory = 'all';
                this.deletedTask = null;
                this.serverUrls = {
                    finish: '/finish.html',
                    edit: '/edit.html',
                    delete: '/delete.html',
                    add: '/add.html'
                };
                this.init();
            }

            init() {
                this.bindEvents();
                this.renderTasks();
                this.updateStats();
                this.loadData();
            }

            loadData() {
                @{
                    string json = JsonConvert.SerializeObject(alltodo);
                }
                this.tasks =  @Html.Raw(json);
            }
            bindEvents() {
                // 浮动添加按钮
                document.getElementById('floatingAddBtn').addEventListener('click', () => {
                    this.showAddTaskModal();
                });

                // 添加任务表单
                document.getElementById('addTaskForm').addEventListener('submit', (e) => {


                });

                document.getElementById('save').addEventListener('click', () => {
                    let form = document.getElementById('addTaskForm');
                    let formData = {};
                    for (let i = 0; i < form.elements.length; i++) {
                        let element = form.elements[i];
                        if (element.name) {
                            formData[element.name] = element.value;
                        }
                    }
                    formData.level = document.querySelector('input[type="radio"]:checked').value;

                    this.addTask(formData);

                });
                // 关闭模态框
                document.getElementById('closeModalBtn').addEventListener('click', () => {
                    this.hideAddTaskModal();
                });

                document.getElementById('cancelAddBtn').addEventListener('click', () => {
                    this.hideAddTaskModal();
                });

                // 点击遮罩层关闭模态框
                document.getElementById('addTaskModal').addEventListener('click', (e) => {
                    if (e.target.id === 'addTaskModal') {
                        this.hideAddTaskModal();
                    }
                });

                // ESC键关闭模态框
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && document.getElementById('addTaskModal').classList.contains('show')) {
                        this.hideAddTaskModal();
                    }
                });

                // 分类切换
                document.querySelectorAll('.category-tab').forEach(tab => {
                    tab.addEventListener('click', (e) => {
                        this.switchCategory(e.target.dataset.category);
                    });
                });

                // 撤销删除
                document.getElementById('undoBtn').addEventListener('click', () => {
                    this.undoDelete();
                });
            }

            showAddTaskModal() {
                const modal = document.getElementById('addTaskModal');
                modal.classList.add('show');
                document.body.style.overflow = 'hidden'; // 防止背景滚动


            }

            hideAddTaskModal() {
                const modal = document.getElementById('addTaskModal');
                modal.classList.remove('show');
                document.body.style.overflow = ''; // 恢复滚动

                // 清空表单
                this.clearAddTaskForm();
            }

            clearAddTaskForm() {
                document.getElementById('taskDescription').value = '';
                document.getElementById('taskStartTime').value = '';
                document.getElementById('taskDueTime').value = '';
            }
            //添加待办
            async addTask(data) {
                try {
                   $.ajax({
                       url: "/Work/TodoDay/Add",
                        method: "POST",
                        dataType: "json",
                       data: data,
                        success: function (response) {
                            if (response.code == 0) {
                                // 立即更新UI
                                todoApp.showNotification(`待办"${data.content}"添加成功`, 'success');
                                todoApp.tasks.unshift(response.data);
                                todoApp.renderTasks();
                                todoApp.updateStats();
                                todoApp.hideAddTaskModal();
                            } else {
                                todoApp.showNotification(`待办"${task.content}--"${response.msg}`, 'info');
                            }
                        }
                    });
                } catch (error) {
                    // 请求失败，从UI中移除任务
                    const taskIndex = this.tasks.findIndex(t => t.id === task.id);
                    if (taskIndex !== -1) {
                        this.tasks.splice(taskIndex, 1);
                        this.loadData();
                        this.renderTasks();
                        this.updateStats();
                    }

                    console.error('任务添加失败:', error);
                    this.showNotification('任务添加失败，请重试', 'error');
                }
            }

            switchCategory(category) {
                this.currentCategory = category;

                // 更新标签状态
                document.querySelectorAll('.category-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[data-category="${category}"]`).classList.add('active');

                this.renderTasks();
            }

            renderTasks() {
                const taskList = document.getElementById('taskList');
                const emptyState = document.getElementById('emptyState');
                let filteredTasks = this.tasks;
                if (this.currentCategory !== 'all') {
                    filteredTasks = this.tasks.filter(task => task.category === this.currentCategory);
                }

                // 更新任务计数
                document.getElementById('currentTaskCount').textContent = filteredTasks.length;

                if (filteredTasks.length === 0) {
                    taskList.innerHTML = '';
                    emptyState.style.display = 'block';
                    return;
                }

                emptyState.style.display = 'none';
                taskList.innerHTML = '';
                filteredTasks.forEach(task => {

                    const taskElement = this.createTaskElement(task);
                    taskList.appendChild(taskElement);
                });
            }

            createTaskElement(task) {
                const li = document.createElement('li');
                li.className = `task-item ${task.status ==@ModelDb.p_work_todo.status_enum.未完成.ToSByte()  ? '' : 'completed'}`;
                li.dataset.taskId = task.id;
                const startTimeText = task.s_date_time ? this.formatDateTime(task.s_date_time) : '';
                const dueTimeText = task.e_date_time ? this.formatDateTime(task.e_date_time) : '';
                const isOverdue = task.e_date_time && new Date(task.e_date_time) < new Date() && !task.status;

            li.innerHTML = `
                    <div class="task-checkbox ${task.status == @ModelDb.p_work_todo.status_enum.未完成.ToSByte() ? '' : 'checked'}" onclick="todoApp.toggleTask(${task.id})"></div>
                    <div class="task-content">
                        <div class="task-title">${this.escapeHtml(task.content)}</div>
                        <div class="task-meta">
                            <span class="task-category">类型</span>
                           <span class="task-date start-date">🚀 ${startTimeText}</span>
                           ${dueTimeText ? `<span class="task-date ${isOverdue ? 'overdue' : ''}">📅 ${dueTimeText}</span>` : ''}

                        </div>
                    </div>
                    <div class="task-actions" >
                        <button  class="action-btn edit-btn" onclick="todoApp.editTask(${task.id})"  style="display:${task.status == @ModelDb.p_work_todo.status_enum.未完成.ToSByte()?'':'none'}">编辑</button>
                        <button class="action-btn delete-btn" onclick="todoApp.deleteTask(${task.id})">删除</button>
                    </div>
                    <div class="task-edit-form">
                        <input type="text" class="edit-input" value="${this.escapeHtml(task.content)}" placeholder="任务描述">

                        <input type="datetime-local" class="edit-input" value="${task.s_date_time}" placeholder="开始时间">
                        <input type="datetime-local" class="edit-input" value="${task.e_date_time}" placeholder="截止时间">
                        <div class="edit-actions">
                            <button class="save-btn" onclick="todoApp.saveTask(${task.id})">保存</button>
                            <button class="cancel-btn" onclick="todoApp.cancelEdit(${task.id})">取消</button>
                        </div>
                    </div>
                `;

                return li;
            }
            //完成待办
            async toggleTask(taskId) {
                const task = this.tasks.find(t => t.id === taskId);
                if (!task) return;
                // 保存原始状态，用于回滚
                const originalCompleted = task.completed;


                try {
                     //发送AJAX请求
                    $.ajax({
                        url: "/Work/TodoDay/Complete",
                        method: "POST",
                        dataType: "json",
                        data: {
                            id: taskId
                        },
                        success: function (response) {
                            if (response.code == 0) {
                                // 立即更新UI
                                todoApp.tasks.find(t => t.id === taskId).status == 1;
                                todoApp.showNotification(`待办"${task.content}"已标记为已完成`, 'success');
                                let index = todoApp.tasks.findIndex(t => t.id === taskId);;
                                todoApp.tasks[index].status = @ModelDb.p_work_todo.status_enum.已完成.ToSByte();
                                todoApp.renderTasks();
                                todoApp.updateStats();
                            } else {
                                todoApp.showNotification(`待办"${task.content}" -- ${response.msg}`, 'info');
                            }
                        }
                    });
                } catch (error) {
                    // 请求失败，回滚状态
                    task.completed = originalCompleted;
                    this.renderTasks();
                    this.updateStats();

                    console.error('任务状态更新失败:', error);
                    this.showNotification('任务状态更新失败，已恢复原状态', 'error');
                }
            }

            editTask(taskId) {
                const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
                if (taskElement) {
                    taskElement.classList.add('editing');
                    const titleInput = taskElement.querySelector('.task-edit-form input[type="text"]:first-child');
                    titleInput.focus();
                    titleInput.select();
                }
            }

            async saveTask(taskId) {
                const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
                if (!taskElement) return;

                const inputs = taskElement.querySelectorAll('.task-edit-form input, .task-edit-form select');

                const [ description,  startTime, dueTime] = Array.from(inputs).map(input => input.value);
                const task = this.tasks.find(t => t.id === taskId);
                if (!task) return;



                // 保存原始数据，用于回滚
                const originalData = {
                    title: task.title,
                    description: task.description,
                    category: task.category,
                    startTime: task.startTime,
                    dueTime: task.dueTime
                };

                // 立即更新UI
                task.content = description.trim();
                task.s_date_time = startTime;
                task.e_date_time = dueTime;

                task.description = description.trim();
                task.startTime = startTime;
                task.dueTime = dueTime;


                try {
                     $.ajax({
                        url: "/Work/TodoDay/Add",
                        method: "POST",
                        dataType: "json",
                         data: {
                             p_work_todo_day: task
                        },
                        success: function (response) {
                            if (response.code == 0) {
                                // 立即更新UI
                                todoApp.showNotification(`待办"${task.content}"修改成功`, 'success');
                                todoApp.renderTasks();
                            }
                        }
                    });

                } catch (error) {
                    // 请求失败，回滚数据
                    task.title = originalData.title;
                    task.description = originalData.description;
                    task.category = originalData.category;
                    task.startTime = originalData.startTime;
                    task.dueTime = originalData.dueTime;
                    this.renderTasks();
                    console.error('任务编辑失败:', error);
                    this.showNotification('任务编辑失败，已恢复原数据', 'error');
                }
            }

            cancelEdit(taskId) {
                const taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
                if (taskElement) {
                    taskElement.classList.remove('editing');
                }
            }

            async deleteTask(taskId) {
                const taskIndex = this.tasks.findIndex(t => t.id === taskId);
                if (taskIndex === -1) return;

                const task = this.tasks[taskIndex];
                // 立即从UI中移除
                  try {
                     //发送AJAX请求
                    $.ajax({
                        url: "/Work/TodoDay/Del",
                        method: "POST",
                        dataType: "json",
                        data: {
                            id: taskId
                        },
                        success: function (response) {
                            if (response.code == 0) {
                                // 立即更新UI
                                todoApp.showNotification(`待办"${task.content}"已标记为已删除`, 'success');
                                todoApp.deletedTask = todoApp.tasks.splice(taskIndex, 1)[0];
                                todoApp.renderTasks();
                                todoApp.updateStats();
                            }
                        }
                    });
                } catch (error) {
                    // 请求失败，回滚状态
                    task.completed = originalCompleted;
                    this.renderTasks();
                    this.updateStats();

                    console.error('任务状态更新失败:', error);
                    this.showNotification('任务状态更新失败，已恢复原状态', 'error');
                }
            }

            showUndoNotification() {
                const notification = document.getElementById('undoNotification');
                notification.style.display = 'block';

                setTimeout(() => {
                    notification.style.display = 'none';
                    this.deletedTask = null;
                }, 5000);
            }

            undoDelete() {
                if (this.deletedTask) {
                    this.tasks.unshift(this.deletedTask);
                    this.renderTasks();
                    this.updateStats();
                    this.deletedTask = null;

                    document.getElementById('undoNotification').style.display = 'none';

                    // 显示撤销成功提示
                    this.showNotification('任务已恢复', 'info');
                }
            }

            updateStats() {
                const total = this.tasks.length;
                const completed = this.tasks.filter(t => t.status == @ModelDb.p_work_todo.status_enum.未完成.ToSByte()).length;
                const pending = total - completed;
                document.getElementById('totalTasks').textContent = total;
                document.getElementById('completedTasks').textContent = completed;
                document.getElementById('pendingTasks').textContent = pending;
            }

            formatDate(dateString) {
                const date = new Date(dateString);
                const today = new Date();
                const diffTime = date - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                if (diffDays === 0) return '今天';
                if (diffDays === 1) return '明天';
                if (diffDays === -1) return '昨天';
                if (diffDays > 0) return `${diffDays}天后`;
                if (diffDays < 0) return `${Math.abs(diffDays)}天前`;

                return date.toLocaleDateString('zh-CN');
            }

            formatDateTime(dateTimeString) {
                const date = new Date(dateTimeString);
                const today = new Date();
                const diffTime = date - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                const timeStr = date.toLocaleTimeString('zh-CN', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });

                if (diffDays === 0) return `今天 ${timeStr}`;
                if (diffDays === 1) return `明天 ${timeStr}`;
                if (diffDays === -1) return `昨天 ${timeStr}`;
                if (diffDays > 0) return `${diffDays}天后 ${timeStr}`;
                if (diffDays < 0) return `${Math.abs(diffDays)}天前 ${timeStr}`;

                return date.toLocaleString('zh-CN', {
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            saveTasks() {
                localStorage.setItem('todoTasks', JSON.stringify(this.tasks));
            }

            loadTasks() {
                this.loadData()
                return this.tasks;
            }

          

            // 编辑任务AJAX请求
            async submitTaskEdit(taskId, taskData) {
                try {
                    // 模拟网络延迟
                    await new Promise(resolve => setTimeout(resolve, 500));

                    const response = await fetch(this.serverUrls.edit, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            taskId: taskId,
                            ...taskData,
                            timestamp: new Date().toISOString()
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('任务编辑成功:', result);
                    return result;
                } catch (error) {
                    console.error('编辑任务AJAX请求失败:', error);

                    if (error.name === 'TypeError' && error.message.includes('fetch')) {
                        this.showNotification('无法连接到服务器，请检查网络连接', 'error');
                    } else {
                        this.showNotification('编辑任务失败，请稍后重试', 'error');
                    }
                    throw error;
                }
            }

            // 删除任务AJAX请求
            async submitTaskDelete(taskId) {
                try {
                    // 模拟网络延迟
                    await new Promise(resolve => setTimeout(resolve, 500));

                    const response = await fetch(this.serverUrls.delete, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            taskId: taskId,
                            timestamp: new Date().toISOString()
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('任务删除成功:', result);
                    return result;
                } catch (error) {
                    console.error('删除任务AJAX请求失败:', error);

                    if (error.name === 'TypeError' && error.message.includes('fetch')) {
                        this.showNotification('无法连接到服务器，请检查网络连接', 'error');
                    } else {
                        this.showNotification('删除任务失败，请稍后重试', 'error');
                    }
                    throw error;
                }
            }

            // 添加任务AJAX请求
            async submitTaskAdd(taskData) {
                try {
                    // 模拟网络延迟
                    await new Promise(resolve => setTimeout(resolve, 500));

                    const response = await fetch(this.serverUrls.add, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            ...taskData,
                            timestamp: new Date().toISOString()
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('任务添加成功:', result);
                    return result;
                } catch (error) {
                    console.error('添加任务AJAX请求失败:', error);

                    if (error.name === 'TypeError' && error.message.includes('fetch')) {
                        this.showNotification('无法连接到服务器，请检查网络连接', 'error');
                    } else {
                        this.showNotification('添加任务失败，请稍后重试', 'error');
                    }
                    throw error;
                }
            }

            // 显示通知
            showNotification(message, type = 'info') {
                // 创建通知元素
                const notification = document.createElement('div');
                notification.className = `notification notification-${type}`;
                notification.textContent = message;

                // 添加样式
                Object.assign(notification.style, {
                    position: 'fixed',
                    top: '20px',
                    right: '20px',
                    padding: '15px 20px',
                    borderRadius: '8px',
                    color: 'white',
                    fontWeight: '500',
                    zIndex: '3000',
                    maxWidth: '300px',
                    wordWrap: 'break-word',
                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                    transform: 'translateX(100%)',
                    transition: 'transform 0.3s ease'
                });

                // 根据类型设置背景色
                const colors = {
                    success: '#27ae60',
                    error: '#e74c3c',
                    info: '#3498db',
                    warning: '#f39c12'
                };
                notification.style.backgroundColor = colors[type] || colors.info;

                // 添加到页面
                document.body.appendChild(notification);

                // 显示动画
                setTimeout(() => {
                    notification.style.transform = 'translateX(0)';
                }, 100);

                // 自动隐藏
                setTimeout(() => {
                    notification.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }, 3000);
            }


        }

        // 初始化应用
        const todoApp = new TodoApp();

    </script>
</body>
</html>
